{"version":3,"sources":["stopwatch/StopWatch.js","App.js","reportWebVitals.js","index.js","stopwatch/StopWatch.module.css"],"names":["Timer","useState","centiseconds","setCentiseconds","seconds","setSeconds","minutes","setMinutes","timerOn","setTimerOn","useInterval","callback","delay","savedCallback","useRef","useEffect","current","id","setInterval","clearInterval","className","s","WatchBackground","clock","time","String","padStart","buttons","Button","color","variant","onClick","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"iPAIe,SAASA,IACpB,MAAwCC,mBAAS,GAAjD,mBAAOC,EAAP,KAAqBC,EAArB,KACA,EAA8BF,mBAAS,GAAvC,mBAAOG,EAAP,KAAgBC,EAAhB,KACA,EAA8BJ,mBAAS,GAAvC,mBAAOK,EAAP,KAAgBC,EAAhB,KACA,EAA8BN,oBAAS,GAAvC,mBAAOO,EAAP,KAAgBC,EAAhB,KAuBA,SAASC,EAAYC,EAAUC,GAC3B,IAAMC,EAAgBC,mBAGtBC,qBAAU,WACNF,EAAcG,QAAUL,IACzB,CAACA,IAGJI,qBAAU,WAKN,GAAc,OAAVH,EAAgB,CAChB,IAAIK,EAAKC,aALb,WACIL,EAAcG,YAIaJ,GAC3B,OAAO,kBAAMO,cAAcF,OAEhC,CAACL,IAIR,OA3CAF,GAAY,WACHF,GAELL,GAAgB,SAACD,GAAD,OACK,KAAjBA,EAAsB,EAAIA,EAAe,OAE9C,IACHQ,GAAY,WACHF,GAELH,GAAW,SAACD,GAAD,OAA0B,KAAZA,EAAiB,EAAIA,EAAU,OACzD,KAEHM,GAAY,WACHF,GAELD,GAAW,SAACD,GAAD,OAA0B,KAAZA,EAAiB,EAAIA,EAAU,OACzD,KA2BC,qBAAKc,UAAWC,IAAEC,gBAAlB,SACI,sBAAKF,UAAWC,IAAEE,MAAlB,UACI,sBAAKH,UAAWC,IAAEG,KAAlB,UACKC,OAAOnB,GAASoB,SAAS,EAAG,KADjC,MAC0CD,OAAOrB,GAASsB,SAAS,EAAG,KAAM,IAD5E,KAEOD,OAAOvB,GAAcwB,SAAS,EAAG,QAExC,uBAAMN,UAAWC,IAAEM,QAAnB,WACa,IAAZnB,GACG,cAACoB,EAAA,EAAD,CAAQC,MAAM,UAAUC,QAAQ,YAAYC,QAAS,kBAAMtB,GAAW,IAAtE,oBAEa,IAAZD,GACG,cAACoB,EAAA,EAAD,CAAQC,MAAM,UAAUC,QAAQ,YAAYC,QAAS,kBAAMtB,GAAW,IAAtE,qBAGR,sBAAMW,UAAWC,IAAEM,QAAnB,SACF,cAACC,EAAA,EAAD,CAAQE,QAAQ,YACRD,MAAM,UACNE,QAAS,WACbtB,GAAW,GACXN,EAAgB,GAChBE,EAAW,GACXE,EAAW,IANf,0BCzDCyB,MARf,WACE,OACE,qBAAKZ,UAAU,MAAf,SACJ,cAACpB,EAAD,OCKeiC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K,kBCfAc,EAAOC,QAAU,CAAC,gBAAkB,mCAAmC,KAAO,wBAAwB,MAAQ,yBAAyB,QAAU,8B","file":"static/js/main.203df40e.chunk.js","sourcesContent":["import React, {useState, useRef, useEffect} from \"react\";\r\nimport s from './StopWatch.module.css'\r\nimport Button from '@mui/material/Button';\r\n\r\nexport default function Timer() {\r\n    const [centiseconds, setCentiseconds] = useState(0);\r\n    const [seconds, setSeconds] = useState(0);\r\n    const [minutes, setMinutes] = useState(0);\r\n    const [timerOn, setTimerOn] = useState(false);\r\n\r\n    useInterval(() => {\r\n        if (!timerOn) return;\r\n\r\n        setCentiseconds((centiseconds) =>\r\n            centiseconds === 99 ? 0 : centiseconds + 1\r\n        );\r\n    }, 10);\r\n    useInterval(() => {\r\n        if (!timerOn) return;\r\n\r\n        setSeconds((seconds) => (seconds === 59 ? 0 : seconds + 1));\r\n    }, 1000);\r\n\r\n    useInterval(() => {\r\n        if (!timerOn) return;\r\n\r\n        setMinutes((minutes) => (minutes === 59 ? 0 : minutes + 1));\r\n    }, 60000);\r\n\r\n// source: https://overreacted.io/making-setinterval-declarative-with-react-hooks/-\r\n    // The Hook made by Den Abramov:\r\n    function useInterval(callback, delay) {\r\n        const savedCallback = useRef();\r\n\r\n        // Remember the latest callback.\r\n        useEffect(() => {\r\n            savedCallback.current = callback;\r\n        }, [callback]);\r\n\r\n        // Set up the interval.\r\n        useEffect(() => {\r\n            function tick() {\r\n                savedCallback.current();\r\n            }\r\n\r\n            if (delay !== null) {\r\n                let id = setInterval(tick, delay);\r\n                return () => clearInterval(id);\r\n            }\r\n        }, [delay]);\r\n    }\r\n\r\n\r\n    return (\r\n        <div className={s.WatchBackground}>\r\n            <div className={s.clock}>\r\n                <div className={s.time}>\r\n                    {String(minutes).padStart(2, \"0\")} : {String(seconds).padStart(2, \"0\")}{\" \"}\r\n                    : {String(centiseconds).padStart(2, \"0\")}\r\n                </div>\r\n                <span className={s.buttons}>\r\n                {timerOn === false && (\r\n                    <Button color=\"success\" variant=\"contained\" onClick={() => setTimerOn(true)}>Start</Button>\r\n                )}\r\n                    {timerOn === true && (\r\n                        <Button color=\"success\" variant=\"contained\" onClick={() => setTimerOn(false)}>Stop</Button>\r\n                    )}\r\n                      </span>\r\n                <span className={s.buttons}>\r\n              <Button variant=\"contained\"\r\n                      color=\"success\"\r\n                      onClick={() => {\r\n                  setTimerOn(false);\r\n                  setCentiseconds(0);\r\n                  setSeconds(0);\r\n                  setMinutes(0);\r\n              }}>Reset</Button>\r\n                </span>\r\n\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\n\r\n","\nimport './App.css';\nimport Timer from \"./stopwatch/StopWatch\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n<Timer/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"WatchBackground\":\"StopWatch_WatchBackground__39cYD\",\"time\":\"StopWatch_time__2ilGP\",\"clock\":\"StopWatch_clock__rzQLL\",\"buttons\":\"StopWatch_buttons__1QAkP\"};"],"sourceRoot":""}